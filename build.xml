<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>
<!--
	Kunena phing build file

	@package	Kunena
	@subpackage	com_kunena
	@copyright	Copyright (C) 2008 - 2013 Kunena Team. All rights reserved.
				portions (C) 2007 MjazTools. All rights reserved.
	@license	GNU General Public License <http://www.gnu.org/copyleft/gpl.html>
	@link		http://www.kunena.org

	The following parameters can be defined inside the PHPSTORM build task as Arguments. They
	allow the build file to be platform independent as not path information resides within
	any of the build files.

	Parameters: (with default values - adjust the directories in PHPSTORM to your individual setup)
	-Dproject_dir=..				(= workspace/kunena)
	-Dpackage_dir=../../packages	(= workspace/packages)
	-Dtmp_dir=tmp					(= workspace/kunena/build/tmp)
	-Dbuild_dir=package				(= workspace/kunena/build/package)
-->
<project name="kunena" basedir="." description="Phing Build Script for Kunena" default="dist">

    <!-- Setup of any global settings that will apply to the entire build script -->
    <property file="./build.properties" />

    <condition property="project_dir" value="../../">
        <not><isset property="project_dir" /></not>
    </condition>
    <condition property="tmp_dir" value="tmp">
        <not><isset property="tmp_dir" /></not>
    </condition>
    <condition property="build_dir" value="package">
        <not><isset property="build_dir" /></not>
    </condition>
    <!-- This directory will persist between builds to make some parts of build faster -->
    <condition property="cache_dir" value="cache">
        <not><isset property="cache_dir" /></not>
    </condition>

    <condition property="package_dir" value="../../../${phing.project.name}-build">
        <not><isset property="package_dir" /></not>
    </condition>

    <xmlproperty file="${project_dir}/pkg_kunena.xml" collapseAttributes="true" prefix="xml" keepRoot="false" />
    <tstamp>
        <format property="str.datefmt" pattern="${cfg.datefmt}" locale="${cfg.dateloc}" />
    </tstamp>
    <condition property="version.date" value="${str.datefmt}">
        <istrue value="${cfg.adddate}" />
    </condition>
    <condition property="str.version" value="_${cfg.versionprefix}${xml.version}">
        <istrue value="${cfg.addversion}" />
    </condition>
    <condition property="str.date" value="_${str.datefmt}">
        <istrue value="${cfg.adddate}" />
    </condition>

    <property name="str.fileversion" value="${str.version}${str.date}" />

    <condition property="do.tar">
        <istrue value="${cfg.tar}" />
    </condition>
    <condition property="do.zip">
        <istrue value="${cfg.zip}" />
    </condition>
    <condition property="do.gzip">
        <istrue value="${cfg.gzip}" />
    </condition>
    <condition property="do.bz2">
        <istrue value="${cfg.bz2}" />
    </condition>

    <!-- Add version information to all xml files and forum.php -->
    <filterchain id="filter">
        <replacetokens>
            <token key="kunenaversion" value="${xml.version}"/>
            <token key="kunenaversiondate" value="${version.date}" />
            <token key="kunenaversionname" value="${xml.versionname}" />
        </replacetokens>
    </filterchain>

    <property name="kunena.admin" value="components/com_kunena/admin" />
    <property name="kunena.libraries" value="libraries/kunena" />
    <property name="kunena.media" value="media/kunena" />
    <property name="kunena.plugins" value="plugins" />
    <property name="kunena.site" value="components/com_kunena/site" />
    <!--<property name="kunena.layouts" value="layouts/kunena" />-->



    <target name="dist" depends="init,preflight,mkdir,old,info,build,build-components,build-layouts,build-libraries,build-media,build-plugins,build-language,package,cleanup,postflight" />


    <target name="init">
        <echo message="Hello, welcome to ${phing.project.name} build tool!" />
    </target>

    <!-- Preflight check to see if we can even run the build script -->
    <target name="preflight">
        <echo message="Checking if we can run all build options..." />

        <!-- Fail the build if the user is not root -->
        <exec command="id -u" outputProperty="currentuser" />
        <if>
            <not>
                <equals arg1="${currentuser}" arg2="0" />
            </not>
            <then>
                <fail message="You must run this build as sudo!" />
            </then>
        </if>

        <trycatch>
            <try>
                <!-- Fail the build if npm is not installed -->
                <exec command="phpdoc --version" checkreturn="true" passthru="true" />
            </try>
            <catch>
                <fail message="Please install phpDocumentor through PEAR" />
            </catch>
        </trycatch>

        <trycatch>
            <try>
                <!-- Fail the build if npm is not installed -->
                <exec command="npm -v" checkreturn="true" passthru="true" />
            </try>
            <catch>
                <fail message="Please install Node Package Manager" />
            </catch>
        </trycatch>

        <trycatch>
            <try>
                <!-- Fail the build if lessc is not installed -->
                <exec command="lessc -v" checkreturn="true" passthru="true" />
            </try>
            <catch>
                <fail message="Please install Less Compiler" />
            </catch>
        </trycatch>

        <trycatch>
            <try>
                <!-- Fail the build if lessc is not installed -->
                <exec command="uglifyjs -V" checkreturn="true" passthru="true" />
            </try>
            <catch>
                <fail message="Please install UglifyJs Compiler" />
            </catch>
        </trycatch>

        <trycatch>
            <try>
                <!-- Fail the build if lessc is not installed -->
                <exec command="cleancss -v" checkreturn="true" passthru="true" />
            </try>
            <catch>
                <fail message="Please install CleanCSS Compiler" />
            </catch>
        </trycatch>

        <echo message="Checking if we can run all build options...DONE!" />
    </target>


    <target name="mkdir">
        <echo message="Making directory structure..." />

        <mkdir dir="${cache_dir}" />
        <mkdir dir="${cache_dir}/phpdoc2" />
        <mkdir dir="${tmp_dir}" />
        <mkdir dir="${tmp_dir}/languages" />
        <mkdir dir="${tmp_dir}/languages_extra" />
        <mkdir dir="${tmp_dir}/languages_extra/language" />
        <mkdir dir="${build_dir}" />
        <mkdir dir="${build_dir}/distribution" />
        <mkdir dir="${build_dir}/distribution/packages" />
        <mkdir dir="${build_dir}/documentation" />
        <mkdir dir="${package_dir}" />
        <mkdir dir="${package_dir}/archive" />
        <mkdir dir="${package_dir}/documentation" />
        <mkdir dir="${package_dir}/packages" />

        <echo message="Making directory structure...DONE!" />
    </target>


    <target name="old">
        <echo message="Moving old items to a new direcotry..." />

        <move todir="${package_dir}/archive" preservelastmodified="false" includeemptydirs="false">
            <fileset dir="${package_dir}">
                <exclude name="archive/" />
            </fileset>
        </move>

        <echo message="Moving old items to a new direcotry...DONE!" />
    </target>

    <!-- Initialize all project related files, at this point we are past any "location" setup work so its safe to proceed -->
    <target name="build">
        <echo message="Building Installer.." />
        <!-- Move files needed by the installer -->
        <copy file="${project_dir}/pkg_kunena.xml" todir="${build_dir}/distribution" overwrite="true">
            <filterchain refid="filter"/>
        </copy>
        <copy file="${project_dir}/install.php" todir="${build_dir}/distribution" overwrite="true">
            <filterchain refid="filter"/>
        </copy>
        <copy file="${project_dir}/COPYRIGHT.php" todir="${build_dir}/distribution" overwrite="true">
            <filterchain refid="filter"/>
        </copy>
        <copy file="${project_dir}/README.md" tofile="${build_dir}/distribution/README.txt" overwrite="true">
            <filterchain refid="filter"/>
        </copy>
        <copy file="${project_dir}/LICENSE.txt" tofile="${build_dir}/distribution/LICENSE.txt" overwrite="true">
            <filterchain refid="filter"/>
        </copy>
        <!--copy todir="${build_dir}/install" overwrite="true">
			<fileset dir="${project_dir}/kunena.admin/install" />
		</copy-->

        <!-- Rename component entry files so that they replace the installer files just before the end of the installation process. -->
        <!--move todir="${build_dir}/archive" includeEmptyDirs="no">
			<fileset dir="${tmp_dir}/archive" />
		</move-->

        <!-- Language pack -->
        <copy file="${project_dir}/${kunena.admin}/language/all/README.md" tofile="${tmp_dir}/languages_extra/README.txt" overwrite="true">
            <filterchain refid="filter"/>
        </copy>
        <copy file="${project_dir}/${kunena.admin}/language/all/pkg_kunena_languages.xml" tofile="${tmp_dir}/languages_extra/pkg_kunena_languages.xml" overwrite="true">
            <filterchain refid="filter"/>
        </copy>
        <copy file="${project_dir}/${kunena.admin}/language/all/install.script.php" tofile="${tmp_dir}/languages_extra/install.script.php" overwrite="true">
            <filterchain refid="filter"/>
        </copy>

        <!-- Readme For Package Directory-->
        <copy file="${project_dir}/README.md" tofile="${package_dir}/README.txt" overwrite="true">
            <filterchain refid="filter"/>
        </copy>

        <echo message="Building Installer..DONE!" />
    </target>

    <target name="build-components" depends="build">
        <echo message="Building Components..." />

        <copy todir="${tmp_dir}/packages/com_kunena">
            <fileset dir="${project_dir}/${kunena.admin}">
                <exclude name="language/**"/>
            </fileset>
        </copy>
        <copy todir="${tmp_dir}/packages/com_kunena/site">
            <fileset dir="${project_dir}/${kunena.site}">
                <exclude name="language/**"/>
                <exclude name="template/**/params.ini"/>
            </fileset>
        </copy>
        <!-- Add version information to all xml files and forum.php -->
        <copy todir="${tmp_dir}/packages/com_kunena" overwrite="true">
            <filterchain refid="filter"/>
            <fileset dir="${project_dir}/${kunena.admin}">
                <include name="**/*.xml"/>
                <exclude name="language/**/*.xml"/>
            </fileset>
        </copy>
        <copy todir="${tmp_dir}/packages/com_kunena/site" overwrite="true">
            <filterchain refid="filter"/>
            <fileset dir="${project_dir}/${kunena.site}">
                <include name="**/*.xml"/>
                <exclude name="language/**/*.xml"/>
            </fileset>
        </copy>

        <echo message="Building Components...DONE!" />
    </target>

    <target name="build-layouts" depends="build">
        <!--<copy todir="${tmp_dir}/packages/kunena_layouts" overwrite="true">
			<fileset dir="${project_dir}/layouts/kunena"/>
		</copy>-->
        <!--<copy todir="${tmp_dir}/packages/kunena_layouts" overwrite="true">
			<filterchain refid="filter"/>
			<fileset dir="${project_dir}/layouts/kunena">
				<include name="**/*.xml"/>
			</fileset>
		</copy>-->
    </target>

    <target name="build-libraries" depends="build">
        <echo message="Building Libraries.." />
        <copy todir="${tmp_dir}/packages/lib_kunena" overwrite="true">
            <fileset dir="${project_dir}/libraries/kunena"/>
        </copy>
        <copy todir="${tmp_dir}/packages/lib_kunena" overwrite="true">
            <filterchain refid="filter"/>
            <fileset dir="${project_dir}/${kunena.libraries}">
                <include name="forum/forum.php"/>
                <include name="**/*.xml"/>
            </fileset>
        </copy>
    </target>

    <target name="build-media" depends="build">
        <echo message="Building Media.." />
        <copy todir="${tmp_dir}/packages/kunena_media" overwrite="true">
            <fileset dir="${project_dir}/${kunena.media}"/>
        </copy>
        <!-- Add version information to all xml files and forum.php -->
        <copy todir="${tmp_dir}/packages/kunena_media" overwrite="true">
            <filterchain refid="filter"/>
            <fileset dir="${project_dir}/${kunena.media}">
                <include name="**/*.xml"/>
            </fileset>
        </copy>
        <echo message="Building Media...DONE!" />
    </target>

    <target name="build-plugins" depends="build">
        <echo message="Building Plugins.." />
        <copy todir="${tmp_dir}/packages/plg_content_kunena" overwrite="true">
            <fileset dir="${project_dir}/${kunena.plugins}/plg_content_kunena"/>
        </copy>
        <copy todir="${tmp_dir}/packages/plg_system_kunena" overwrite="true">
            <fileset dir="${project_dir}/${kunena.plugins}/plg_system_kunena"/>
        </copy>
        <copy todir="${tmp_dir}/packages/plg_quickicon_kunena" overwrite="true">
            <fileset dir="${project_dir}/${kunena.plugins}/plg_quickicon_kunena"/>
        </copy>
        <!-- Add version information to all xml files and forum.php -->
        <copy todir="${tmp_dir}/packages/plg_content_kunena" overwrite="true">
            <filterchain refid="filter"/>
            <fileset dir="${project_dir}/plugins/plg_content_kunena">
                <include name="**/*.xml"/>
            </fileset>
        </copy>
        <copy todir="${tmp_dir}/packages/plg_system_kunena" overwrite="true">
            <filterchain refid="filter"/>
            <fileset dir="${project_dir}/plugins/plg_system_kunena">
                <include name="**/*.xml"/>
            </fileset>
        </copy>
        <copy todir="${tmp_dir}/packages/plg_quickicon_kunena" overwrite="true">
            <filterchain refid="filter"/>
            <fileset dir="${project_dir}/plugins/plg_quickicon_kunena">
                <include name="**/*.xml"/>
            </fileset>
        </copy>
        <echo message="Building Plugins..DONE!" />
    </target>


    <target name="build-language" depends="build">
        <echo message="Building Language..." />

        <!--<property name="languages" value="en-GB, af-ZA, ar-AA, az-AZ, bg-BG, bs-BA, ca-ES, ckb-IQ, cs-CZ, cy-GB, da-DK, de-DE, el-GR, eo-XX, es-ES, et-EE, eu-ES, fa-IR, fi-FI, fr-FR, he-IL, hi-IN, hr-HR, hu-HU, id-ID, it-IT, ja-JP, km-KH,
		ko-KR, kz-KZ, lt-LT, lv-LV, mk-MK, nb-NO, nl-NL, pl-PL, pt-BR, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sq-AL, sr-RS, sr-YU, sv-SE, th-TH, tr-TR, ug-CN, uk-UA, ur-PK, vi-VN, zh-CN, zh-TW" />-->

        <foreach param="tag" target="language-process">
            <!-- mapper is needed to return one part of the string, in this case part of directory name -->
            <mapper type="glob" from="com_kunena_*.xml" to="*"/>
            <fileset dir="${project_dir}/${kunena.admin}/language/all/manifests">
                <include name="*.xml"/>
            </fileset>
        </foreach>
        <echo message="Building Language...DONE!" />
    </target>

    <target name="language-process">
        <copy file="${project_dir}/${kunena.admin}/language/all/manifests/com_kunena_${tag}.xml" todir="${tmp_dir}/languages/${tag}" overwrite="true">
            <filterchain refid="filter"/>
        </copy>
        <copy todir="${tmp_dir}/languages/${tag}/admin" includeemptydirs="false" overwrite="true">
            <mapper type="flatten" />
            <fileset dir="${project_dir}/${kunena.admin}">
                <include name="**/${tag}.*.ini"/>
            </fileset>
        </copy>
        <copy todir="${tmp_dir}/languages/${tag}/site" includeemptydirs="false" overwrite="true">
            <mapper type="flatten" />
            <fileset dir="${project_dir}/${kunena.site}">
                <include name="**/${tag}.*.ini"/>
            </fileset>
        </copy>
        <if>
            <equals arg1="${tag}" arg2="en-GB" />
            <then>
                <copy todir="${tmp_dir}/packages/com_kunena/language/${tag}">
                    <fileset dir="${tmp_dir}/languages/${tag}/admin" />
                </copy>
                <copy todir="${tmp_dir}/packages/com_kunena/site/language/${tag}">
                    <fileset dir="${tmp_dir}/languages/${tag}/site" />
                </copy>
            </then>
            <else>
                <move todir="${tmp_dir}/packages/com_kunena/language/${tag}">
                    <fileset dir="${tmp_dir}/languages/${tag}/admin">
                        <include name="*.install.ini"/>
                    </fileset>
                </move>
            </else>
        </if>
    </target>

    <target name="build-documentation">
        <copy todir="${build_dir}/documentation" overwrite="true">
            <fileset dir="${cache_dir}/phpdoc2">
                <include name="phpdoc-cache-*/**"/>
            </fileset>
        </copy>
        <echo message="Building API Documentation..." />
        <exec command="phpdoc -d ${tmp_dir}/packages/lib_kunena -t ${build_dir}/documentation -v --template clean"  passthru="true"/>
        <!-- move does not work on some OS where files have permissions defaulted to system and not root account -->
        <move todir="${cache_dir}/phpdoc2" includeemptydirs="true" overwrite="true">
            <fileset dir="${build_dir}/documentation/">
                <include name="phpdoc-cache-**"/>
            </fileset>
        </move>
        <!--<delete>
			<fileset dir="${build_dir}/documentation">
				<type type="dir" />
				<include name="phpdoc-cache-**/**" />
			</fileset>
		</delete>-->
        <echo message="Building API Documentation...DONE!" />
    </target>

    <target name="package">
        <!-- Process all prepared packages -->
        <foreach param="directory" target="package-process">
            <fileset dir="${tmp_dir}/packages/">
                <type type="dir" />
                <depth max="0" min="0" />
            </fileset>
        </foreach>

        <!-- Process all packages to zip -->
        <phingcall target="archive">
            <property name="destination.file" value="${package_dir}/languages/pkg_${cfg.name}_languages${str.fileversion}" />
            <property name="base.directory" value="${tmp_dir}/languages_extra" />
        </phingcall>

        <phingcall target="archive">
            <property name="destination.file" value="${package_dir}/documentation/doc_${cfg.name}_documentation${str.fileversion}" />
            <property name="base.directory" value="${build_dir}/documentation" />
        </phingcall>

        <!-- Zip the created Zips for packages -->
        <phingcall target="archive">
            <property name="destination.file" value="${package_dir}/packages/distribution/${cfg.prefix}${cfg.name}${str.fileversion}" />
            <property name="base.directory" value="${build_dir}" />
        </phingcall>
    </target>

    <target name="package-process">
        <phingcall target="archive">
            <property name="destination.file" value="${build_dir}/packages/distribution/${directory}${str.version}" />
            <property name="base.directory" value="${tmp_dir}/packages/distribution/${directory}" />
        </phingcall>
    </target>

    <target name="cleanup">
        <delete dir="${tmp_dir}" />
        <delete dir="${build_dir}" />
    </target>

    <target name="postflight">
        <echo message="Congratulations, build should of finished without error!" />
    </target>

    <!-- Utility Functions -->
    <target name="info">
        <echo message="Phing Version:   ${phing.version}" />
        <echo message="Project:         ${cfg.name}" />
        <echo message="XML Name:        ${xml.name}" />
        <echo message="XML Version:     ${xml.version}" />
        <echo message="XML Author:      ${xml.author}" />
        <echo message="XML Copyright:   ${xml.copyright}" />
        <echo message="XML License:     ${xml.license}" />
        <echo message="XML Description: ${xml.description}" />
        <echo message="Date:            ${TODAY}" />
    </target>

    <target name="archive">
        <if>
            <equals arg1="${do.zip}" arg2="true" />
            <then>
                <zip destfile="${destination.file}.zip">
                    <fileset dir="${base.directory}">
                        <exclude name="**/*.tar,**/*.gz,**/*.bz2" />
                    </fileset>
                </zip>
            </then>
        </if>
        <if>
            <equals arg1="${do.tar}" arg2="true" />
            <then>
                <tar destfile="${destination.file}.tar" compression="none">
                    <fileset dir="${base.directory}">
                        <exclude name="**/*.zip,**/*.gz,**/*.bz2" />
                    </fileset>
                </tar>
            </then>
        </if>
        <if>
            <equals arg1="${do.gzip}" arg2="true" />
            <then>
                <tar destfile="${destination.file}.tar.gz" compression="gzip">
                    <fileset dir="${base.directory}">
                        <exclude name="**/*.zip,**/*.tar,**/*.bz2" />
                    </fileset>
                </tar>
            </then>
        </if>
        <if>
            <equals arg1="${do.bz2}" arg2="true" />
            <then>
                <tar destfile="${destination.file}.tar.bz2" compression="bzip2">
                    <fileset dir="${base.directory}">
                        <exclude name="**/*.zip,**/*.tar,**/*.gz" />
                    </fileset>
                </tar>
            </then>
        </if>
    </target>
</project>

